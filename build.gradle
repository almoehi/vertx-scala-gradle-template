import org.vertx.java.platform.PlatformLocator
import org.vertx.java.core.Handler

/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "gradle/maven.gradle"

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = groupname
archivesBaseName = artifact

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

project.ext.moduleName = "maven:$groupname:$artifact:$version"

// We don't produce a jar
jar.enabled = false 
assert configurations.archives.artifacts.removeAll { it.file == jar.archivePath }

configurations {
  provided
  testCompile.extendsFrom provided
}

repositories {
  mavenLocal()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

dependencies {
  provided "io.vertx:vertx-core:$vertxVersion"
  provided "io.vertx:vertx-platform:$vertxVersion"
  testCompile "junit:junit:$junitVersion"
  testCompile "io.vertx:testtools:$toolsVersion"
  compile 'org.scala-lang:scala-library:2.10.0'
  testCompile "org.scala-lang:scala-library:2.10.0"
}

// This sets up the classpath for
buildscript {

  repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }

  dependencies {
    classpath "io.vertx:vertx-core:$vertxVersion"
    classpath "io.vertx:vertx-platform:$vertxVersion"
  }
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
    scala {
        srcDirs = ['src/main/scala']
    }
  }
  test {
    scala {
        srcDirs = ['src/test/scala']
    }
  }
}

task copyMod( type:Copy, dependsOn: 'classes', description: 'Assemble the module into the local mods directory' ) {
  into "mods/$moduleName"
  from compileJava
  from 'src/main/resources'
  into( 'lib' ) {
    from configurations.compile
  }
}

task modZip( type: Zip, dependsOn: 'pullInDeps', description: 'Package the module .zip file') {
  group = 'vert.x'
  description = "Assembles a vert.x module"
  destinationDir = project.file('build/libs')
  archiveName = "${artifact}-${version}" + ".zip"
  from copyMod
}

artifacts {
  archives modZip
}

task cleanModsDir(type: Delete) {
  delete 'mods'
}

clean {
  dependsOn cleanModsDir
}

test {
  dependsOn copyMod
  // Important! Remove any classpath entries for the module classes and resources- these must be picked up using the
  // module classloader from  inside the module, not from the system classpath!
  classpath -= sourceSets.main.output
  classpath -= configurations.compile

  // Make sure tests are always run!
  outputs.upToDateWhen { false }

  systemProperty 'vertx.test.timeout', 300
  systemProperty 'vertx.version', version
  systemProperty 'vertx.modulename', moduleName

  // Show output
  testLogging.showStandardStreams = true

  testLogging { exceptionFormat "full" }
}

task runMod(dependsOn: copyMod, description: 'Run the module using all the build dependencies (not using installed vertx') << {
  def pm = PlatformLocator.factory.createPlatformManager()
  pm.deployModule(moduleName, null, 1, new Handler<String>() {
    public void handle(String deploymentID) {
      System.out.println("CTRL-C to stop server")
    }
  });
  Thread.sleep(Long.MAX_VALUE);
}

task pullInDeps(dependsOn: copyMod, description: 'Pull in all the module dependencies for the module into the nested mods directory') << {
  if (pullInDeps == 'true') {
    def pm = PlatformLocator.factory.createPlatformManager()
    System.out.println("Pulling in dependencies for module " + moduleName + " Please wait")
    pm.pullInDependencies(moduleName)
    System.out.println("Dependencies pulled into mods directory of module")
  }
}
